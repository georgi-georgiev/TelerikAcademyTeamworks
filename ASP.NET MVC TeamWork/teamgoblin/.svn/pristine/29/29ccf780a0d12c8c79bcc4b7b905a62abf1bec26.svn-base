@model GoblinFreelancer.Models.Project

@{
    ViewBag.Title = "ViewProject";
}

<h2>ViewProject</h2>

<div>
    @if (Model.Owner.UserName == User.Identity.Name)
    {
        <p>CreatedOn: @Html.DisplayFor(m => m.CreatedOn)</p>

        using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true)

            <fieldset class="form-horizontal">
                <legend>Bug</legend>

                @Html.HiddenFor(model => model.Id)

                <div class="control-group">
                    @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Name)
                        @Html.ValidationMessageFor(model => model.Name, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.Deadline, new { @class = "control-label" })
                    <div class="controls">
                        @Html.Kendo().DatePickerFor(model => model.Deadline).Name("Deadline")
                        @Html.ValidationMessageFor(model => model.Deadline, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.Summary, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Summary)
                        @Html.ValidationMessageFor(model => model.Summary, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="control-group">
                    @Html.LabelFor(model => model.Salary, new { @class = "control-label" })
                    <div class="controls">
                        @Html.EditorFor(model => model.Salary)
                        @Html.ValidationMessageFor(model => model.Salary, null, new { @class = "help-inline" })
                    </div>
                </div>
                <div class="form-actions no-color">
                    <input type="submit" value="Edit" class="btn" />
                </div>
            </fieldset>
        }
        <div>
            Skills:
            @foreach (var skill in Model.Skills)
            {
                <span>@skill.Name <a href="~/Projects/RemoveSkill?projectId=@Model.Id&skillId=@skill.Id">Remove</a></span>
            }
            <div>
                @using (Html.BeginForm())
                {
                    @(Html.Kendo()
                        .AutoComplete()
                        .Name("project-skill-input")
                        .DataTextField("Name")
                        .Placeholder("Select Skill")
                        .DataSource(data =>
                        {
                            data.Read(read =>
                            {
                                read.Action("AvailableSkills", "Projects")
                                .Data("onAdditionalData");
                            }).ServerFiltering(true);
                        }))
                    <button id="add-skill-btn">Add Skill</button>
                    <span id="skill-panel" style="height:25px;"></span>
                }
            </div>
        </div>
        <div>
            Collaborators:
            @foreach (var collaborator in Model.Collaborators)
            {
                <a href="~/Users/ByUser/@collaborator.UserName"><span>@collaborator.UserName
                    <a href="~/Projects/RemoveCollaborator?projectId=@Model.Id&colId=@collaborator.Id">Remove</a></span></a>
            }
            <div>
                @using (Html.BeginForm())
                {
                    @(Html.Kendo()
                        .AutoComplete()
                        .Name("collaborator-input")
                        .DataTextField("UserName")
                        .Placeholder("Select Collaborator")
                        .DataSource(data =>
                        {
                            data.Read(read =>
                            {
                                read.Action("AvailableCollaborators", "Projects")
                                .Data("onAdditionalDataCollaborators");
                            }).ServerFiltering(true);
                        }))
                    <button id="add-collaborator-btn">Add Collaborator</button>
                    <span id="collaborator-panel" style="height:25px;"></span>
                }
            </div>
        </div>
        <div><textarea></textarea> <input type="submit" value="Chat" /></div>
    }
    else
    {
        <p>Name: @Html.DisplayFor(m => m.Name)</p>
        <p>Owner: @Html.DisplayFor(m => m.Owner.UserName)</p>
        <p>Salary: @Html.DisplayFor(m => m.Salary)</p>
        <p>Summary: @Html.DisplayFor(m => m.Summary)</p>
        <p>CreatedOn: @Html.DisplayFor(m => m.CreatedOn)</p>
        <p>Deadline: @Html.DisplayFor(m => m.Deadline)</p>
        <p>Category: <a href="~/Categories/Projects?category=@Html.DisplayFor(m => m.Category.Name)">@Html.DisplayFor(m => m.Category.Name)</a></p>
        <p>
            Skills:
            @foreach (var skill in Model.Skills)
            {
                <span>@skill.Name</span>
            }
        </p>
        <div>
            Collaborators:
            @foreach (var collaborator in Model.Collaborators)
            {
                if (collaborator.UserName != User.Identity.Name)
                {
                    <a href="~/Users/ByUser/@collaborator.UserName"><span>@collaborator.UserName</span></a>
                }
                else
                {
                    <a href="~/Users/ByUser/@collaborator.UserName">me</a>
                }
            }
        </div>
        foreach (var collaborator in Model.Collaborators)
        {
            if (collaborator.UserName == User.Identity.Name)
            {
                <div><textarea></textarea> <input type="submit" value="Chat" /></div>
                break;
            }
        }

    }
</div>
<script>
    function onAdditionalData() {
        return {
            text: $('#project-skill-input').val(),
            projectId: $('#Id').val()
        }
    }

    function onAdditionalDataCollaborators() {
        return {
            text: $('#collaborator-input').val(),
            projectId: $('#Id').val()
        }
    }

    $('#add-skill-btn').on('click', function (evt) {
        evt.preventDefault();
        $.post('/Projects/Addskill?projectId=@Model.Id', 'name=' + $('#project-skill-input').val())
            .then(function (s) {
                $('#skill-panel').empty()
                var el = $('<span></span>');
                el.text(s).appendTo($('#skill-panel'));
                el.fadeOut(2000, function () {
                    $('#skill-panel').empty();
                    window.location.reload();
                });


            }, function (e) {
                $('#skill-panel').empty()
                var el = $('<span></span>');
                el.text(e).appendTo($('#skill-panel'));
                el.fadeOut(2000, function () {
                    $('#skill-panel').empty();
                });
            });
    });

    $('#add-collaborator-btn').on('click', function (evt) {
        evt.preventDefault();
        $.post('/Projects/AddCollaborator?projectId=@Model.Id', 'name=' + $('#collaborator-input').val())
            .then(function (s) {
                $('#collaborator-panel').empty()
                var el = $('<span></span>');
                el.text(s).appendTo($('#collaborator-panel'));
                el.fadeOut(2000, function () {
                    $('#collaborator-panel').empty();
                    window.location.reload();
                });


            }, function (e) {
                $('#collaborator-panel').empty()
                var el = $('<span></span>');
                el.text(e).appendTo($('#collaborator-panel'));
                el.fadeOut(2000, function () {
                    $('#collaborator-panel').empty();
                });
            });
    });
</script>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}